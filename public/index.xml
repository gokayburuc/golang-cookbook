<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Golang Cookbook by GOKAYBURUC</title>
    <link>http://example.org/</link>
    <description>Recent content in Introduction on Golang Cookbook by GOKAYBURUC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr</language>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello World Uygulaması </title>
      <link>http://example.org/docs/posts/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/hello-world/</guid>
      <description>HELLO WORLD (MERHABA DÜNYA) UYGULAMASI GO programlama diline ve de birçok programlama diline başlayanların ilk olarak yaptıkları şey, ekranda &amp;ldquo;hello world!&amp;rdquo; yazısının yazdırılmasıdır.
Bu örnekte GO programlama dilinin çalışma mantığını öğreneceksiniz.
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello, World&amp;#34;) } Şimdi örneğimizi parçalarına ayırarak incelemeye başlayalım.
package main package main Bu ifade paket deklerasyonu (package declaration) ifadesidir.
GO programlama dilinde paket modül mimarisi mevcuttur.  </description>
    </item>
    
    <item>
      <title>Veri Tipleri (Data Types) </title>
      <link>http://example.org/docs/posts/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/data-types/</guid>
      <description>GO Dilinde Veri Tipleri (Data Types in GO) GO programlama dilinde veri tipleri varsayılan olarak mevcuttur. Ayrıca kullanıcılar tarafından da tanımlanabilirler.
 Varsayılan veri tipleri program kurulduğu an itibariyle tanımlı olan veri tipleridir.    Kullanıcı tanımlı veri tipleri ise kullanıcı tarafından sisteme tanıtılan ve kullanılan veri tipleridir.   Veri Tiplerinin Gruplanması Genel olarak veri tipleri dört ana başlık altında toplanabilir
 Basic type (Temel Veri Tipi ) : Sayılar, metin ve bool ifadeler bu kategoriye girer.</description>
    </item>
    
    <item>
      <title>Değişkenler (Variables)</title>
      <link>http://example.org/docs/posts/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/variables/</guid>
      <description>Değişkenler (Variables) Değişken ( Variable ) , bir değeri tutmak için bir depolama konumudur. İzin verilen değerler kümesi, değişkenin türüne göre belirlenir.
// string degisken turu var isim string = &amp;#34;Gokay&amp;#34; Yani elimizde isim diye bir değişken olduğunu var sayalım. İzin verilen deger olarak degisken türü dikkate alındığında string type bir ifade olduğunu düşünürsek bu ifade yalnızca string veri tipinde tutulabilir. Yani yazı olarak saklanabilir.
 string olarak saklanan bir değişkene, bir tam sayı integer veya ondalıklı sayı float değer verirsek, veyahut mantıksal bool bir ifade verirsek sistemden hata alırız.</description>
    </item>
    
    <item>
      <title>Sabitler (Constants)</title>
      <link>http://example.org/docs/posts/constants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/constants/</guid>
      <description>Sabitler (Constants) Constant ifadeler sabitler olarak bilinirler. Değişken ifadelerinden farklı olarak, bir defa değer atandığı an itibariyle sistemde sabit kalırlar. İşleme tabi tutulsalar dahi, işlem bitişinde yine değerleri sabit olmaktadır.
Yazım Biçimi - Snytax const ifade = deger HATIRLATMA: const ifadeleri scope içinde ve dışında tanımlanabilir.  const İfadelerin Veri Türleri const ifadeler aşağıda yer alan tüm veri tiplerinde veri taşıyabilirler.
 Integer - int Float - float32, float64 vs. String - string Boolean - bool Character - tek bir karakter  const İfadelerin Kullanımı GeeksForGeeks web sitesinden alınan örnek ifade aşağıda verilmiştir.</description>
    </item>
    
    <item>
      <title>Anahtar Durum İfadeleri (Switch Case )</title>
      <link>http://example.org/docs/posts/switch-case/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/switch-case/</guid>
      <description>Anahtar Durum İfadeleri (Switch Case) Switch ifadesi, çok yollu bir dal ifadesidir. İfadenin değerine dayalı olarak yürütmeyi bir kodun farklı bölümlerine aktarmak için etkili bir yol sağlar. Basit bir ifade ile demiryolu makası gibi düşünülebilir.
Go dili, iki tür anahtar deyimini destekler:
 İfade Switch Tip Switch  İfade Switch İfade switch, C, C++, Java dilindeki switch ifadesine benzer. İfadenin değerine bağlı olarak yürütmeyi kodun farklı bölümlerine göndermenin kolay bir yolunu sağlar.</description>
    </item>
    
    <item>
      <title> Kapalı Fonksiyonlar - Closures</title>
      <link>http://example.org/docs/posts/closures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/closures/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Diziler - Arrays</title>
      <link>http://example.org/docs/posts/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/arrays/</guid>
      <description>Diziler (Arrays) </description>
    </item>
    
    <item>
      <title>Döngüler (Loops)</title>
      <link>http://example.org/docs/posts/loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/loops/</guid>
      <description>Döngüler (Loops) GO programlama dilinde tek bir döngü mevcuttur; bu da for döngüsüdür. Bu döngü C, C++, Java, C# dillerindeki ile benzerlik göstermektedir. #java #cplusplus #csharp #c
Yazım Biçimi (Syntax) Yazım şekli de aşağıdaki gibidir.
for initialization; condition; post{ // statements.... }  Başlatma ifadesi (intialization) : Başlatma ifadesi isteğe bağlıdır ve for döngüsü başlamadan önce yürütülür. Başlatma ifadesi her zaman değişken bildirimleri, artış veya atama ifadeleri veya işlev çağrıları gibi basit bir ifadededir.</description>
    </item>
    
    <item>
      <title>Fonksiyonlar (Functions)</title>
      <link>http://example.org/docs/posts/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/functions/</guid>
      <description>Fonksiyonlar (Functions) Bir fonksiyon (işlev), sıfır veya daha fazla giriş parametresinin sıfır veya daha fazla çıkış parametresine eşlenmesidir.
HATIRLATMA: Giriş parametreleri fonksiyonlarda argüman olarak adlandırılırlar. Konu içerisinde geçen argüman ifadeleri fonksiyonlara giriş yapılan değerler anlamına gelir.  Fonksiyon Kullanmanın Avantajları Fonksiyonların (İşlevlerin) kullanmanın avantajları şunlardır:
 Kod tekrarını azaltma Karmaşık problemleri daha basit parçalara ayırma Kodun netliğini artırma Kodun yeniden kullanımı Bilgi gizleme  Fonksiyonların Uygulama Alanları Fonksiyonlar GO programlama dilini daha esnek hale getirirler.</description>
    </item>
    
    <item>
      <title>Operatörler - Operators</title>
      <link>http://example.org/docs/posts/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/operators/</guid>
      <description>Operatörler - Operatörs </description>
    </item>
    
    <item>
      <title>Şartlı İfadeler (If - Else Conditionals)</title>
      <link>http://example.org/docs/posts/conditionals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/conditionals/</guid>
      <description>Şartlı İfadeler (If - Else Conditionals) </description>
    </item>
    
    <item>
      <title>Dilimler - Slices </title>
      <link>http://example.org/docs/posts/slices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/slices/</guid>
      <description>Dilimler (Slices) </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/channels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/channels/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/errors/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/generics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/generics/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/goroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/goroutines/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/importpackage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/importpackage/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/interfaces/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/maps/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/methods/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/modules/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/packages/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/pointers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/pointers/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/ranges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/ranges/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/recursions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/recursions/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/structs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/structs/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/posts/variadic-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/posts/variadic-functions/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>